/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.virna5.qeffilter;

import com.virna5.sapfilter.SAPField;
import java.util.logging.Logger;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author opus
 */
public class QEFInspectorPanel extends javax.swing.JPanel implements TableModelListener {

    private static final Logger LOG = Logger.getLogger(QEFInspectorPanel.class.getName());
   
    private QEFFilterDescriptor descriptor;
    private QEFFieldsWrapper cfw;
    
    
    public QEFInspectorPanel(QEFFilterDescriptor descriptor) {
        this.descriptor = descriptor;
        initComponents();
        
        cfw = descriptor.getQEFfields();
        
        initTable();
        
        model.addTableModelListener(this); 
    }

    public void initTable(){
        
        
        
    }
    
    
    final TableModel model = new AbstractTableModel(){
    
        @Override
        public int getColumnCount() {
            return 6;
        }
        
        @Override
        public String getColumnName(int column) {
            return cnames[column];
        }
        
        @Override
        public int getRowCount() {
            return cfw.size();
        }
        
        @Override
        public Object getValueAt(int row, int column) {
            QEFField csvf = cfw.get(row);
            Object o = new Object();
            
            switch (column) {
                case 0:
                    o=csvf.getFieldname();
                    break;
                    
                case 1:
                    o=csvf.getRangelow();
                    break;
                case 2:
                    o=csvf.getAlarmlow();
                    break;
                
                case 3:
                    o=csvf.getValue();
                    break;
                    
                case 4:
                    o=csvf.getAlarmhigh();
                    break;
                case 5:
                    o=csvf.getRangehigh();
                    break;    
                    
                    
                default:
                    break;
            }
            
            return o;
        }

        public void setValueAt(Object value, int row, int column) {
            QEFField csvf = cfw.get(row);
            
            switch (column) {
                case 0:
                    csvf.setFieldname((String)value);
                    break;
                
                    
                default:
                    break;
            } 
        }

        
        String[] cnames = new String[]{
           "ELM", "Limite <", "Alarme <", "Nominal", "Alarme>", "Limite>"  
        };
        
        Class[] types = new Class [] {
                java.lang.String.class, 
                    java.lang.Double.class, java.lang.Double.class,
                    java.lang.Double.class,
                    java.lang.Double.class, java.lang.Double.class
        };

        @Override
        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }

        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }

    };
    
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        jTable1.setModel(model);
        jScrollPane1.setViewportView(jTable1);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, "Convers√£o em :"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void tableChanged(TableModelEvent e) {
        LOG.info("table changed");
    }
}
