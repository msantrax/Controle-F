/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.virna5.contexto;

import java.beans.PropertyVetoException;
import java.util.LinkedHashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JInternalFrame;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.InternalFrameListener;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.virna5.contexto//Monitor//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "MonitorTopComponent",
        iconBase = "com/virna5/contexto/nfs_mount.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "com.virna5.contexto.MonitorTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_MonitorAction",
        preferredID = "MonitorTopComponent"
)
@Messages({
    "CTL_MonitorAction=Monitor",
    "CTL_MonitorTopComponent=Monitor de Dispositivos",
    "HINT_MonitorTopComponent=Monitore os dispositivos em funcionamento nas suas tarefas"
})
public final class MonitorTopComponent extends TopComponent  implements InternalFrameListener {

    private static final Logger log = Logger.getLogger(MonitorTopComponent.class.getName());

    private LinkedHashMap<String,JInternalFrame> frames;
    
    public MonitorTopComponent() {
        
        log.setLevel(Level.INFO);
        
        initComponents();
        setName("Monitor");
        setToolTipText("tooltip");
        //setContentPane(dpmain);
        
        frames = new LinkedHashMap<>();
     
    }
   
    public boolean isLoaded(String id){
        return frames.containsKey(id);
    }
    
    public JInternalFrame addIFrame(String []framedata, BaseDescriptor bd, String artifact) {
         
        try {
            String classname = framedata[0];
            
            Class clazz = Class.forName(classname);
            JInternalFrame internal_frame = (JInternalFrame)clazz.newInstance();
              
            internal_frame.setTitle(framedata[1]);
            internal_frame.addInternalFrameListener(this);
            internal_frame.setVisible(true);
            dpmain.add(internal_frame);
            internal_frame.setLocation(100, 100);
            internal_frame.setSelected(true);
            
            MonitorIFrameInterface mif = (MonitorIFrameInterface)internal_frame;
            
            mif.setIframeid(artifact);
            mif.setDescriptor(bd);
            BaseService bs = bd.getService();
            
            mif.setService(bs);
            bs.addIFrame(String.valueOf(bd.getUID()), mif);           
            //bs.UpdateUI(null, String.valueOf(bd.getUID()));
                
            frames.put(artifact, internal_frame);
            
            SMTraffic initui_req = new SMTraffic(bd.getUID(),bd.getUID(),0,
                                            VirnaServices.STATES.TSK_INITUI, 
                                            null);
            bs.processSignal(initui_req, bd);
            
    
            return internal_frame;
            
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | PropertyVetoException ex) {
            Exceptions.printStackTrace(ex);
            return  null;
        }
    }
    
    
    

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of
     * this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dpmain = new javax.swing.JDesktopPane();

        setOpaque(true);
        setLayout(new java.awt.BorderLayout());

        dpmain.setBackground(new java.awt.Color(0, 153, 0));

        javax.swing.GroupLayout dpmainLayout = new javax.swing.GroupLayout(dpmain);
        dpmain.setLayout(dpmainLayout);
        dpmainLayout.setHorizontalGroup(
            dpmainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 982, Short.MAX_VALUE)
        );
        dpmainLayout.setVerticalGroup(
            dpmainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 724, Short.MAX_VALUE)
        );

        add(dpmain, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane dpmain;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void internalFrameOpened(InternalFrameEvent e) {
        log.fine("Frame opened");
    }

    @Override
    public void internalFrameClosing(InternalFrameEvent e) {
        log.fine("Frame closing");
    }

    @Override
    public void internalFrameClosed(InternalFrameEvent e) {
        log.fine("Frame closed");
        MonitorIFrameInterface mif = (MonitorIFrameInterface)e.getSource();
        frames.remove(mif.getIframeid());
     
        BaseService bs = mif.getService();
        String bsid = mif.getIframeid().split("@")[1];
        bs.removeIFrame(bsid);

        
    }

    @Override
    public void internalFrameIconified(InternalFrameEvent e) {
        log.fine("Frame iconified");
    }

    @Override
    public void internalFrameDeiconified(InternalFrameEvent e) {
        log.fine("Frame decoinified");
    }

    @Override
    public void internalFrameActivated(InternalFrameEvent e) {
        log.fine("Frame activated");
    }

    @Override
    public void internalFrameDeactivated(InternalFrameEvent e) {
        log.fine("Frame deactivated ");
    }
}
